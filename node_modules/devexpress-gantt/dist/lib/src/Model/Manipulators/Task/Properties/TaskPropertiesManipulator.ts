import { ModelChangesDispatcher } from "../../../Dispatchers/ModelChangesDispatcher";
import { ViewVisualModel } from "../../../VisualModel/VisualModel";
import { BaseManipulator } from "../../BaseManipulator";
import { TaskColorManipulator } from "./TaskColorManipulator";
import { TaskDescriptionManipulator } from "./TaskDescriptionManipulator";
import { TaskEndDateManipulator } from "./TaskEndDateManipulator";
import { TaskMoveManipulator } from "./TaskMoveManipulator";
import { TaskProgressManipulator } from "./TaskProgressManipulator";
import { TaskPropertyManipulator } from "./TaskPropertyManipulator";
import { TaskStartDateManipulator } from "./TaskStartDateManipulator";
import { TaskTitleManipulator } from "./TaskTitleManipulator";

export class TaskPropertiesManipulator extends BaseManipulator {
    title: TaskPropertyManipulator<string>;
    description: TaskPropertyManipulator<string>;
    progress: TaskPropertyManipulator<number>;
    start: TaskPropertyManipulator<Date>;
    end: TaskPropertyManipulator<Date>;
    move: TaskMoveManipulator;
    color: TaskColorManipulator;

    constructor(viewModel: ViewVisualModel, dispatcher: ModelChangesDispatcher) {
        super(viewModel, dispatcher);
        this.title = new TaskTitleManipulator(viewModel, dispatcher);
        this.description = new TaskDescriptionManipulator(viewModel, dispatcher);
        this.progress = new TaskProgressManipulator(viewModel, dispatcher);
        this.start = new TaskStartDateManipulator(viewModel, dispatcher);
        this.end = new TaskEndDateManipulator(viewModel, dispatcher);
        this.move = new TaskMoveManipulator(viewModel, dispatcher);
        this.color = new TaskColorManipulator(viewModel, dispatcher);
    }
}
