import { HistoryItemState } from "../../../History/HistoryItems/HistoryItemState";
import { Task } from "../../../Entities/Task";
import { BaseManipulator } from "../../BaseManipulator";

export abstract class TaskPropertyManipulator<T> extends BaseManipulator {
    setValue(id: string, newValue: T): HistoryItemState {
        const task = this.viewModel.tasks.getItemById(id);
        const oldState = new HistoryItemState(id, this.getPropertyValue(task));
        this.setPropertyValue(task, newValue);
        const viewItem = this.viewModel.findItem(id);
        if(viewItem)
            this.renderHelper.recreateTaskElement(viewItem.visibleIndex);
        return oldState;
    }
    restoreValue(state: HistoryItemState): void {
        if(!state) return;
        const task = this.viewModel.tasks.getItemById(state.id);
        this.setPropertyValue(task, state.value);
        const viewItem = this.viewModel.findItem(state.id);
        if(viewItem)
            this.renderHelper.recreateTaskElement(viewItem.visibleIndex);
    }
    protected abstract getPropertyValue(task: Task): T;
    protected abstract setPropertyValue(task: Task, value: T): void;
}
