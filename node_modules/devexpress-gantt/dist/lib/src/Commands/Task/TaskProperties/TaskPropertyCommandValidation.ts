import { ConstraintViolationDialogParameters } from "../../../Dialogs/DialogParameters/ConstraintViolationDialogParameters";
import { ValidationError } from "../../../Model/Validation/ValidationError";
import { TaskPropertyCommandBase } from "./TaskPropertyCommandBase";

export class TaskPropertyCommandValidation extends TaskPropertyCommandBase {
    protected executeInternal(...parameters: any): boolean {
        const validationErrors = this.control.isValidateDependenciesRequired() ? this.validate(...parameters) : [];
        const criticalErrors = validationErrors.filter(e => e.critical);
        if(!validationErrors.length || validationErrors.length > 1 && criticalErrors.length === 0)
            return this.executeCore(...parameters);
        else if(validationErrors.length === 1)
            this.control.commandManager.showConstraintViolationDialog.execute(new ConstraintViolationDialogParameters(validationErrors[0],
                () => { this.executeCore(...parameters); }));
        return false;
    }
    protected executeCore(...parameters: any): boolean { return false; }
    protected validate(...parameters: any): ValidationError[] {
        return [];
    }
}
