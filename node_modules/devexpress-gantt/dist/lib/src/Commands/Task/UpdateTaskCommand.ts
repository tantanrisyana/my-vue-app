import { isDefined } from "@devexpress/utils/lib/utils/common";
import { TaskColorHistoryItem } from "../../Model/History/HistoryItems/Task/Properties/TaskColorHistoryItem";
import { TaskEndHistoryItem } from "../../Model/History/HistoryItems/Task/Properties/TaskEndHistoryItem";
import { TaskProgressHistoryItem } from "../../Model/History/HistoryItems/Task/Properties/TaskProgressHistoryItem";
import { TaskStartHistoryItem } from "../../Model/History/HistoryItems/Task/Properties/TaskStartHistoryItem";
import { TaskTitleHistoryItem } from "../../Model/History/HistoryItems/Task/Properties/TaskTitleHistoryItem";
import { TaskCommandBase } from "./TaskCommandBase";

export class UpdateTaskCommand extends TaskCommandBase {
    public execute(id: string, newValues: any): boolean {
        return super.execute(id, newValues);
    }
    protected executeInternal(id: string, newValues: any): boolean {
        const task = this.control.viewModel.tasks.getItemById(id);
        if(!task) return false;
        const success = this.control.modelManipulator.dispatcher.raiseTaskMultipleUpdating(
            task,
            newValues,
            (changedNewValues) => {
                newValues.title = changedNewValues.title;
                newValues.progress = changedNewValues.progress;
                newValues.start = changedNewValues.start;
                newValues.end = changedNewValues.end;
                newValues.color = changedNewValues.color;
            });

        if(success) {
            this.history.beginTransaction();
            let needRecalculateParents = false;
            if(isDefined(newValues.title) && newValues.title !== task.title)
                this.history.addAndRedo(new TaskTitleHistoryItem(this.modelManipulator, id, newValues.title));
            if(isDefined(newValues.progress) && newValues.progress !== task.progress) {
                this.history.addAndRedo(new TaskProgressHistoryItem(this.modelManipulator, id, newValues.progress));
                needRecalculateParents = true;
            }
            if(isDefined(newValues.start) && isDefined(newValues.end) && newValues.end.getTime() < newValues.start.getTime())
                newValues.end = newValues.start;

            if(isDefined(newValues.start) && newValues.start !== task.start) {
                this.history.addAndRedo(new TaskStartHistoryItem(this.modelManipulator, id, newValues.start));
                needRecalculateParents = true;
                if(this.control.isValidateDependenciesRequired())
                    this.control.validationController.moveStartDependTasks(id, task.start);
            }
            if(isDefined(newValues.end) && newValues.end !== task.end) {
                this.history.addAndRedo(new TaskEndHistoryItem(this.modelManipulator, id, newValues.end));
                needRecalculateParents = true;
                if(this.control.isValidateDependenciesRequired())
                    this.control.validationController.moveEndDependTasks(id, task.end);
            }
            if(isDefined(newValues.color) && newValues.color !== task.color)
                this.history.addAndRedo(new TaskColorHistoryItem(this.modelManipulator, id, newValues.color));

            if(needRecalculateParents)
                this.validationController.updateParentsIfRequired(id);
            else
                this.control.updateOwnerInAutoParentMode();
            this.history.endTransaction();
        }

        return success;
    }
    isEnabled(): boolean {
        return super.isEnabled() && this.control.settings.editing.allowTaskUpdate;
    }
}
