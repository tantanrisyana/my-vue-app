import { RemoveDependencyHistoryItem } from "../Model/History/HistoryItems/Dependency/RemoveDependencyHistoryItem";
import { DialogBase } from "./DialogBase";
import { ConstraintViolationOption } from "./DialogEnums";
import { ConstraintViolationDialogParameters } from "./DialogParameters/ConstraintViolationDialogParameters";

export class ConstraintViolationDialogCommand extends DialogBase<ConstraintViolationDialogParameters> {
    applyParameters(newParameters: ConstraintViolationDialogParameters, oldParameters: ConstraintViolationDialogParameters): boolean {
        if(newParameters.option === ConstraintViolationOption.DoNothing)
            return false;
        if(newParameters.option === ConstraintViolationOption.RemoveDependency) {
            this.history.beginTransaction();
            this.history.addAndRedo(new RemoveDependencyHistoryItem(this.modelManipulator, oldParameters.validationError.dependencyId));
            oldParameters.callback();
            this.history.endTransaction();
            this.control.barManager.updateItemsState([]);
        }
        if(newParameters.option === ConstraintViolationOption.KeepDependency) {
            oldParameters.callback();
            this.control.barManager.updateItemsState([]);
        }
        return true;
    }
    createParameters(options: ConstraintViolationDialogParameters): ConstraintViolationDialogParameters {
        const dependency = this.control.viewModel.dependencies.getItemById(options.validationError.dependencyId);
        const successorTask = this.control.viewModel.tasks.getItemById(dependency.successorId);
        const predecessorTask = this.control.viewModel.tasks.getItemById(dependency.predecessorId);
        options.successorTaskTitle = successorTask.title;
        options.predecessorTaskTitle = predecessorTask.title;
        return options;
    }
    getDialogName(): string {
        return "ConstraintViolation";
    }
}
